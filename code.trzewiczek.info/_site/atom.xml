<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>trzewiczek blog</title>
 <link href="http://code.trzewiczek.info/atom.xml" rel="self"/>
 <updated>2012-07-01T20:16:50+02:00</updated>
 <id>http://code.trzewiczek.info/</id>
 <author>
   <name>trzewiczek</name>
   <email>krzysztof@trzewiczek.info</email>
 </author>
 
 
 <entry>
   <title>Execution context and code organization</title>
   <link href="http://code.trzewiczek.info/2012/07/01/Execution-context-and-code-organization.html"/>
   <updated>2012-07-01T00:00:00+02:00</updated>
   <id>http://code.trzewiczek.info//2012/07/01/Execution-context-and-code-organization</id>
   <content type="html"><p>JavaScript execution context goes through two phases: entering the context which is declaration phase and code execution phase, when the code is executed from the top down. What&#8217;s interesting here is that one can use it to structure the code in a clear way. Let&#8217;s see the example:</p>
<pre>
<span class='hl kwa'>var</span> _myModule = (<span class='hl kwa'>function</span> () {
    <span class='hl slc'>// p u b l i c   i n t e r f a c e </span>
    that = {};

    that.do_sth_with = <span class='hl kwa'>function</span> (num) {
        <span class='hl kwa'>var</span> result = square(num);
        console.log(result);

        <span class='hl kwa'>return</span> result;
    };

    that.do_sth_else_with = <span class='hl kwa'>function</span> (num) {
        <span class='hl kwa'>var</span> result = cube(num);
        console.log(result);

        <span class='hl kwa'>return</span> result;
    };

    <span class='hl slc'>// s e t t i n g   u p   l o g g e r s</span>
    that.do_sth_with = _logger.pack(that.do_sth_with);

    <span class='hl kwa'>return</span> that;

    <span class='hl slc'>// p r i v a t e   i n t e r f a c e</span>
    <span class='hl kwa'>function</span> square(x) {
        <span class='hl kwa'>return</span> x * x;
    }

    <span class='hl kwa'>function</span> cube(x) {
        <span class='hl kwa'>return</span> x * x * x;
    }
})();
</pre>
<p>How it works? When the interpreter enters the execution context of the function expression inside the brackets, it creates the arguments object and then goes to all function declarations collecting them at the top of the function - practice known as <strong>hoisting</strong>. That means that <strong>helper1</strong> and <strong>helper2</strong> goes up to the top of the function even they are declared after the return statement. Then the that variable declaration is done, but without the initialization. After that the code execution phase starts and that is initialized with a public interface object and only after that (as the code execution goes from top down) the <strong>that.do_sth_with</strong> is being overwritten but the new packed version of itself. Finally, the that object (which is the public interface of this module) is returned and assigned to the <strong>_myModule</strong> variable.</p>

<p>I personally like this way of organizing the modules, because it separates the private from public and working with other developers I don&#8217;t have to deal with internals that much, because everything I&#8217;m interested in is grouped in one place and the helpers are somewhere down at the bottom of the file. What&#8217;s more - there is a special space for setting up the loggers and again it&#8217;s very predictable for me where to look for it and where to add it to keep it save and reliable.</p>

<p>This kind of organization of the module code can be pushed a little farther, by introducing a shared functions space. Let&#8217;s modify a little the previous example:</p>
<pre>
<span class='hl kwa'>var</span> _myModule2 = (<span class='hl kwa'>function</span> () {
    <span class='hl slc'>// p u b l i c   i n t e r f a c e </span>
    that = {};

    that.do_sth_with = <span class='hl kwa'>function</span> (num) {
        <span class='hl kwa'>var</span> result = square(num);
        console.log(result);

        <span class='hl kwa'>return</span> result;
    };

    that.do_sth_else_with = <span class='hl kwa'>function</span> (num) {
        <span class='hl kwa'>var</span> result = cube(num);
        console.log(result);

        <span class='hl kwa'>return</span> result;
    };

    <span class='hl slc'>// s h a r e d   i n t e r f a c e</span>
    that.cube = cube;

    <span class='hl slc'>// s e t t i n g   u p   l o g g e r s</span>
    that.do_sth_with = _logger.pack(that.do_sth_with);

    <span class='hl kwa'>return</span> that;

    <span class='hl slc'>// p r i v a t e   i n t e r f a c e</span>
    <span class='hl kwa'>function</span> square(x) {
        <span class='hl kwa'>return</span> x * x;
    }

    <span class='hl kwa'>function</span> cube(x) {
        <span class='hl kwa'>return</span> x * x * x;
    }
})();
</pre>
<p>We added a new function to the module called cube. It&#8217;s implementation stays in the private section, but after defining the public interface, we added this function to that object, so it&#8217;s publicly accessible. Why we do it? The reason is that in the client&#8217;s code there might be a situation that the cube method of the object <strong>_myModule2</strong> will have to be overwritten - e.g. packed by a logger or some validator functions. The assignment will work perfectly, but on the other hand we won&#8217;t change the behaviour of our private cube function, so when it will be called from within the <strong>_myModule2.do_sth_else</strong> method everything will stay as it was at the beginning. That&#8217;s why it&#8217;s called shared interface, because it becomes public but in a secure way for the private interface.</p>
<pre>
<span class='hl slc'>// we run the public cube function inside the console.log</span>
<span class='hl slc'>// because cube doesn't print the results by itself</span>
console.log('---- 1 ----');
console.log(_myModule2.cube(<span class='hl num'>3</span>));
<span class='hl slc'>// >>> 27</span>

<span class='hl slc'>// we run the method that uses private cube internally</span>
console.log('---- 2 ----');
_myModule2.do_sth_else_with(<span class='hl num'>3</span>);
<span class='hl slc'>// >>> 27</span>

<span class='hl slc'>// we overwrite the public method by some new function</span>
_myModule2.cube = <span class='hl kwa'>function</span> (x) { console.log(x/<span class='hl num'>1000</span>); };

<span class='hl slc'>// again we run the method that uses private cube internally</span>
<span class='hl slc'>// to see if the private one has been affected</span>
console.log('---- 3 ----');
_myModule2.do_sth_else_with(<span class='hl num'>3</span>);
<span class='hl slc'>// >>> 27</span>

<span class='hl slc'>// and now we run the new public cube method to see</span>
<span class='hl slc'>// if the change has been successful </span>
console.log('---- 4 ----');
_myModule2.cube(<span class='hl num'>3</span>);
<span class='hl slc'>// >>> 0.003</span>
</pre>
<p>As we see the shared interface worked perfect. Again, by using the shared interface we separate private from public on the one hand and on the other one we give a hint to other developers that potentially this method might be changed somewhere in the client&#8217;s code and the module is prepared for that situation.</p></content>
 </entry>
 
 <entry>
   <title>Simple step logger in JavaScript</title>
   <link href="http://code.trzewiczek.info/2012/04/25/Simple-logger-in-JavaScript.html"/>
   <updated>2012-04-25T00:00:00+02:00</updated>
   <id>http://code.trzewiczek.info//2012/04/25/Simple-logger-in-JavaScript</id>
   <content type="html"><p>Working on a new version of Raw Salad we faced a crazy bug. One part of the interface started to show and hide in a strange way with no actual request to do that. After a few minutes of debugging I couldn&#8217;t actually track the real sequence of function calls. After fifteenth or so debugger trap I thought I need a step logger. So here it is:</p>
<pre><span class='hl kwa'>var</span> _logger <span class='hl opt'>= (</span><span class='hl kwa'>function</span> <span class='hl opt'>() {</span>
    <span class='hl slc'>// P R I V A T E   I N T E R F A C E</span>
    <span class='hl slc'>// counter and incrementor for logging</span>
    <span class='hl slc'>// the sequence of functions execution</span>
    <span class='hl kwa'>var</span> counter <span class='hl opt'>=</span> <span class='hl num'>0</span><span class='hl opt'>;</span>
    <span class='hl kwa'>var</span> inc_counter <span class='hl opt'>=</span> <span class='hl kwa'>function</span> <span class='hl opt'>() {</span>
        counter <span class='hl opt'>+=</span> <span class='hl num'>1</span><span class='hl opt'>;</span>

        <span class='hl kwa'>return</span> counter<span class='hl opt'>;</span>
    <span class='hl opt'>};</span>
    <span class='hl slc'>// actual logging function</span>
    <span class='hl kwa'>var</span> logger <span class='hl opt'>=</span> <span class='hl kwa'>function</span> <span class='hl opt'>(</span> fn<span class='hl opt'>,</span> debug<span class='hl opt'>,</span> args <span class='hl opt'>) {</span>
        <span class='hl kwa'>var</span> i<span class='hl opt'>;</span>
        <span class='hl kwa'>var</span> arg<span class='hl opt'>;</span>
        <span class='hl slc'>// print the the function execution index and the timestamp</span>
        console<span class='hl opt'>.</span><span class='hl kwd'>log</span><span class='hl opt'>(</span> <span class='hl str'>&quot;&gt;&gt;&gt; &quot;</span> <span class='hl opt'>+</span> <span class='hl kwd'>inc_counter</span><span class='hl opt'>() +</span> <span class='hl str'>&quot; :: &quot;</span> <span class='hl opt'>+</span> <span class='hl kwa'>new</span> <span class='hl kwd'>Date</span><span class='hl opt'>() );</span>
        console<span class='hl opt'>.</span><span class='hl kwd'>log</span><span class='hl opt'>(</span> <span class='hl str'>&quot;&gt;&gt;&gt; In function: &quot;</span> <span class='hl opt'>+</span> fn<span class='hl opt'>.</span>name <span class='hl opt'>);</span>
        <span class='hl slc'>// if not in debug mode - print all function arguments values</span>
        <span class='hl kwa'>if</span><span class='hl opt'>( !</span>debug <span class='hl opt'>) {</span>
            <span class='hl kwa'>for</span><span class='hl opt'>(</span> i <span class='hl opt'>=</span> <span class='hl num'>0</span><span class='hl opt'>;</span> i <span class='hl opt'>&lt;</span> args<span class='hl opt'>.</span>length<span class='hl opt'>; ++</span>i <span class='hl opt'>) {</span>
                arg <span class='hl opt'>=</span> JSON<span class='hl opt'>.</span><span class='hl kwd'>stringify</span><span class='hl opt'>(</span> args<span class='hl kwc'>[i]</span> <span class='hl opt'>);</span>
                console<span class='hl opt'>.</span><span class='hl kwd'>log</span><span class='hl opt'>(</span> <span class='hl str'>&quot;&gt;&gt;&gt; arg: &quot;</span> <span class='hl opt'>+</span> arg <span class='hl opt'>);</span>
            <span class='hl opt'>}</span>
        <span class='hl opt'>}</span>
    <span class='hl opt'>};</span>

    <span class='hl slc'>// P U B L I C   I N T E R F A C E</span>
    <span class='hl kwa'>var</span> that <span class='hl opt'>= {};</span>
    <span class='hl slc'>// public logger function</span>
    <span class='hl slc'>// takes function to pack over and debug mode t/f</span>
    that<span class='hl opt'>.</span>pack <span class='hl opt'>=</span> <span class='hl kwa'>function</span> <span class='hl opt'>(</span> fn<span class='hl opt'>,</span> debug <span class='hl opt'>) {</span>
        <span class='hl slc'>// return multi-arity function that packs over original one</span>
        <span class='hl kwa'>return function</span> <span class='hl opt'>(</span> <span class='hl com'>/* some potential arguments */</span> <span class='hl opt'>) {</span>
            <span class='hl kwa'>var</span> args <span class='hl opt'>=</span> Array<span class='hl opt'>.</span><span class='hl kwa'>prototype</span><span class='hl opt'>.</span>slice<span class='hl opt'>.</span><span class='hl kwd'>call</span><span class='hl opt'>(</span> arguments <span class='hl opt'>);</span>
            <span class='hl slc'>// do the actual logging</span>
            <span class='hl kwd'>logger</span><span class='hl opt'>(</span> fn<span class='hl opt'>,</span> debug<span class='hl opt'>,</span> args <span class='hl opt'>);</span>
            <span class='hl slc'>// if in debug mode - start debugger</span>
            <span class='hl kwa'>if</span><span class='hl opt'>( !!</span>debug <span class='hl opt'>)</span> <span class='hl kwa'>debugger</span><span class='hl opt'>;</span>
            <span class='hl slc'>// execute the original function</span>
            fn<span class='hl opt'>.</span><span class='hl kwd'>apply</span><span class='hl opt'>(</span> <span class='hl kwa'>this</span><span class='hl opt'>,</span> args <span class='hl opt'>);</span>
        <span class='hl opt'>};</span>
    <span class='hl opt'>};</span>

    <span class='hl kwa'>return</span> that<span class='hl opt'>;</span>
<span class='hl opt'>})();</span></pre>
<p>And to actually use it some function has to be packed with it:</p>
<pre><span class='hl slc'>// example function one</span>
<span class='hl kwa'>function</span> <span class='hl kwd'>hide_panel</span><span class='hl opt'>(</span> panel <span class='hl opt'>) {</span>
    <span class='hl kwa'>if</span><span class='hl opt'>( !</span>panel<span class='hl opt'>.</span><span class='hl kwd'>isHidden</span><span class='hl opt'>() ) {</span>
        panel<span class='hl opt'>.</span><span class='hl kwd'>hide</span><span class='hl opt'>();</span>
    <span class='hl opt'>}</span>
<span class='hl opt'>}</span>

<span class='hl slc'>// example function two</span>
<span class='hl kwa'>function</span> <span class='hl kwd'>show_panel</span><span class='hl opt'>(</span> panel <span class='hl opt'>) {</span>
    <span class='hl kwa'>if</span><span class='hl opt'>(</span> panel<span class='hl opt'>.</span><span class='hl kwd'>isHidden</span><span class='hl opt'>() ) {</span>
        panel<span class='hl opt'>.</span><span class='hl kwd'>show</span><span class='hl opt'>();</span>
    <span class='hl opt'>}</span>
<span class='hl opt'>}</span>

<span class='hl kwa'>var</span> hide_panel <span class='hl opt'>=</span> _logger<span class='hl opt'>.</span><span class='hl kwd'>pack</span><span class='hl opt'>(</span> hide_panel <span class='hl opt'>);</span>
<span class='hl kwa'>var</span> show_panel <span class='hl opt'>=</span> _logger<span class='hl opt'>.</span><span class='hl kwd'>pack</span><span class='hl opt'>(</span> show_panel <span class='hl opt'>);</span></pre>
<p>So how it works? The logger takes a function (hide_panel and show_panel) as an argument and optional boolean switching debug mode on and off (not present in above example) and returns a new function with an extra logging code added. This new function we store under the same name as the original one, to keep logging fact invisible for the rest of the code that uses original function.</p>

<p>What next? It&#8217;s actually quite straightforward - the returned function logs the call, runs debugger if in the debug mode and executes the original function with all arguments passed by the user.</p>

<p>The logger function itself prints the execution index with timestamp (to see the real sequence of function calls), function&#8217;s name and the list of arguments if not working in the debug mode (no reason to do that then).</p>

<p>Quite simple, but turned out to be really helpful. It&#8217;s a good example of closures and high-order functions use in JavaScript as well actually. Have fun logging!</p></content>
 </entry>
 
 <entry>
   <title>Changing arity of recursive calls in JavaScript</title>
   <link href="http://code.trzewiczek.info/2012/04/21/Changing-arity-of-recursive-calls-in-JavaScript.html"/>
   <updated>2012-04-21T00:00:00+02:00</updated>
   <id>http://code.trzewiczek.info//2012/04/21/Changing-arity-of-recursive-calls-in-JavaScript</id>
   <content type="html"><p>For some time, I thouhgt how to manage the changing of arity of the function in the recursive calls. It all started with playing around with Little Schemer book and came really handy when I was preparing a simple logging function for debugging Raw Salad.</p>

<p>After some time of investigating I came out with such a solution, presented here on an <i>or</i> function:</p>
<pre><span class='hl kwa'>function</span> <span class='hl kwd'>or</span><span class='hl opt'>() {</span>
    <span class='hl slc'>// change arguments object to array</span>
    <span class='hl kwa'>var</span> args <span class='hl opt'>=</span> Array<span class='hl opt'>.</span><span class='hl kwa'>prototype</span><span class='hl opt'>.</span>slice<span class='hl opt'>.</span><span class='hl kwd'>call</span><span class='hl opt'>(</span> arguments <span class='hl opt'>);</span>

    <span class='hl kwa'>if</span><span class='hl opt'>( !</span>args<span class='hl opt'>.</span>length <span class='hl opt'>) {</span>
        <span class='hl kwa'>return false</span><span class='hl opt'>;</span>
    <span class='hl opt'>}</span>
    <span class='hl kwa'>else</span> <span class='hl opt'>{</span>
        <span class='hl kwa'>if</span><span class='hl opt'>( !!</span>args<span class='hl kwc'>[0]</span> <span class='hl opt'>) {</span>
            <span class='hl kwa'>return true</span><span class='hl opt'>;</span>
        <span class='hl opt'>}</span>
        <span class='hl kwa'>else</span> <span class='hl opt'>{</span>
            <span class='hl kwa'>return</span> or<span class='hl opt'>.</span><span class='hl kwd'>apply</span><span class='hl opt'>(</span> <span class='hl kwa'>this</span><span class='hl opt'>,</span> args<span class='hl opt'>.</span><span class='hl kwd'>slice</span><span class='hl opt'>(</span><span class='hl num'>1</span><span class='hl opt'>) );</span>
        <span class='hl opt'>}</span>
    <span class='hl opt'>}</span>
<span class='hl opt'>}</span></pre>
<p>So now, it&#8217;s possible to pass <i>or</i> as a function and use it as multi-arity function - no need to pass a list of values. Fun!</p></content>
 </entry>
 
 <entry>
   <title>Parallel asynchronous callbacks in JavaScript</title>
   <link href="http://code.trzewiczek.info/2012/03/30/Parallel-asynchronous-callbacks-in-JavaScript.html"/>
   <updated>2012-03-30T00:00:00+02:00</updated>
   <id>http://code.trzewiczek.info//2012/03/30/Parallel-asynchronous-callbacks-in-JavaScript</id>
   <content type="html"><p>The task was quite simple, but turned out that it was fun to code. There was some elections data to be presented on the website and all to be downloaded through the API of election office. Each election had its own API URL, but the format of data was common. The visualisation script was prepared to present the data all at once comparing some statistics between each issue. The problem then was, how to get data from three different API URLs effectively and present them after each call is done. The solution came from closures of course.</p>

<p>The problem is, that we want to send a few async requests at once and have to keep the program running until all data is collected and then some rendering script to be launched. This is a classic closure pattern. You send the request which callbacks keep one shared results object as a closure and another callback that will be triggered after all data arrive.</p>

<p>So there is an empty results array (the shared object), there is a draw_graph callback to be triggered at the end, the is a counter of how many datasets has been already collected and that&#8217;s all.</p>
<pre><span class='hl kwa'>function</span> <span class='hl kwd'>load_election_data</span><span class='hl opt'>(</span> draw_graph<span class='hl opt'>,</span> urls <span class='hl opt'>) {</span>
    <span class='hl kwa'>var</span> i<span class='hl opt'>;</span>
    <span class='hl kwa'>var</span> reqs_number <span class='hl opt'>=</span> urls<span class='hl opt'>.</span>length<span class='hl opt'>;</span>
    <span class='hl kwa'>var</span> results     <span class='hl opt'>=</span> <span class='hl kwa'>new</span> <span class='hl kwd'>Array</span><span class='hl opt'>(</span> reqs_number <span class='hl opt'>);</span>
    <span class='hl kwa'>var</span> remaining   <span class='hl opt'>=</span> reqs_number<span class='hl opt'>;</span>

    <span class='hl kwa'>for</span><span class='hl opt'>(</span> i <span class='hl opt'>=</span> <span class='hl num'>0</span><span class='hl opt'>;</span> i <span class='hl opt'>&lt;</span> reqs_number<span class='hl opt'>; ++</span>i <span class='hl opt'>) {</span>
        <span class='hl opt'>(</span><span class='hl kwa'>function</span> <span class='hl opt'>(</span> inx <span class='hl opt'>) {</span>
            $<span class='hl opt'>.</span><span class='hl kwd'>ajax</span><span class='hl opt'>({</span>
                <span class='hl str'>'url'</span>     <span class='hl opt'>:</span> urls<span class='hl kwc'>[inx]</span><span class='hl opt'>,</span>
                <span class='hl str'>'success'</span> <span class='hl opt'>:</span> <span class='hl kwa'>function</span> <span class='hl opt'>(</span> received_data <span class='hl opt'>) {</span>
                    <span class='hl slc'>// fill the proper place in the array</span>
                    results<span class='hl kwc'>[inx]</span> <span class='hl opt'>=</span> received_data<span class='hl opt'>;</span>
                    remaining <span class='hl opt'>-=</span> <span class='hl num'>1</span><span class='hl opt'>;</span>
                    <span class='hl slc'>// check if all reasults are downloaded</span>
                    <span class='hl kwa'>if</span><span class='hl opt'>( !</span>remaining <span class='hl opt'>) {</span>
                        <span class='hl kwd'>callback</span><span class='hl opt'>(</span> results <span class='hl opt'>);</span>
                    <span class='hl opt'>}</span>
                <span class='hl opt'>}</span>
            <span class='hl opt'>});</span>
        <span class='hl opt'>})(</span>i<span class='hl opt'>);</span>
    <span class='hl opt'>}</span>
<span class='hl opt'>}</span></pre>
<p>As it&#8217;s seen in the code above, an empty array is created in advance. That&#8217;s because is will let keep results ordered, tough the order they arrive is not predictable.</p></content>
 </entry>
 
 <entry>
   <title>Callbacks and closures in JavaScript</title>
   <link href="http://code.trzewiczek.info/2011/12/07/Callbacks-and-closures-in-JavaScript.html"/>
   <updated>2011-12-07T00:00:00+01:00</updated>
   <id>http://code.trzewiczek.info//2011/12/07/Callbacks-and-closures-in-JavaScript</id>
   <content type="html"><p>A classic example of a closure - probably one of the post powerfull JavaScript feature - is the counter.</p>
<pre><span class='hl kwa'>function</span> <span class='hl kwd'>counter</span> <span class='hl opt'>() {</span>
  <span class='hl kwa'>var</span> num <span class='hl opt'>=</span> <span class='hl num'>0</span><span class='hl opt'>;</span>

  <span class='hl kwa'>return</span> <span class='hl opt'>{</span>
      add_one<span class='hl opt'>:</span> <span class='hl kwa'>function</span> <span class='hl opt'>() {</span>
          num <span class='hl opt'>+ =</span> <span class='hl num'>1</span><span class='hl opt'>;</span>
          <span class='hl kwa'>return</span> num<span class='hl opt'>;</span>
      <span class='hl opt'>},</span>
      get_num<span class='hl opt'>:</span> <span class='hl kwa'>function</span> <span class='hl opt'>() {</span>
          <span class='hl kwa'>return</span> num<span class='hl opt'>;</span>
      <span class='hl opt'>}</span>
  <span class='hl opt'>};</span>
<span class='hl opt'>}</span>

<span class='hl kwa'>var</span> my_counter <span class='hl opt'>=</span> <span class='hl kwd'>counter</span><span class='hl opt'>();</span>
console<span class='hl opt'>.</span><span class='hl kwd'>log</span><span class='hl opt'>(</span> my_counter<span class='hl opt'>.</span><span class='hl kwd'>get_num</span><span class='hl opt'>() );</span>
console<span class='hl opt'>.</span><span class='hl kwd'>log</span><span class='hl opt'>(</span> my_counter<span class='hl opt'>.</span><span class='hl kwd'>add_one</span><span class='hl opt'>() );</span> </pre>
<p>Simple and understandable. Two interesting things about this solution are:</p>

<ul>
<li>despite the fact that the counter function terminates, after creating and returning the new object, the <strong>num</strong> object is stored in memory (garbage collector won&#8217;t remove it), because both methods in returned object have access to it, so they keep the reference (this is the closure)</li>

<li>num variable is only available via two methods for the newly created object, which makes it private. This mean that the returned object becomes very clear and one hundred percent secure interface to the state stored in the closure.</li>
</ul>

<p>Nice example and real-world actually, because using closures as a private state with a public interface pattern is extremely common. But to understand the full power of closures, let&#8217;s look at an example from the asyncronous programming area.</p>

<p>The example below is a standard asynchronous data access we use in Raw Salad. There are three modules:</p>

<ul>
<li><strong>_gui</strong> which is responsible for handling the GUI events and rendering things</li>

<li><strong>_store</strong> which keeps the current state of the application</li>

<li><strong>_db</strong> which, if necessary, grabs data from database</li>
</ul>

<p>The story would be something like this: after I click the button, data is being taken from the store and nicely rendered in the browser. If there&#8217;s no such data in the store, the _db module is requesting database for all we actually need. After the data is back, it&#8217;s saved in store and then passed to GUI for rendering. In the second scenario no one knows what will happen between the front-end and the back-end and how long we will wait for the response. What&#8217;s more, the _gui module can&#8217;t predict what data is available in the store and what has to be downloaded from the back-end. In fact the _gui module should know nothing about the way data is stored and manipulated - it handles events and renders the website.</p>
<h3>_gui.js</h3><pre>$<span class='hl opt'>(</span><span class='hl str'>'#more-data-please'</span><span class='hl opt'>).</span><span class='hl kwd'>click</span><span class='hl opt'>(</span> <span class='hl kwa'>function</span> <span class='hl opt'>() {</span>
    <span class='hl kwa'>var</span> destination <span class='hl opt'>=</span> $<span class='hl opt'>(</span><span class='hl kwa'>this</span><span class='hl opt'>).</span><span class='hl kwd'>parent</span><span class='hl opt'>();</span>
    <span class='hl kwa'>var</span> render_data <span class='hl opt'>=</span> <span class='hl kwa'>function</span> <span class='hl opt'>(</span> from_store <span class='hl opt'>) {</span>
        <span class='hl kwa'>var</span> new_data <span class='hl opt'>=</span> $<span class='hl opt'>(</span><span class='hl str'>'&lt;h1&gt;'</span> <span class='hl opt'>+</span> from_store <span class='hl opt'>+</span> <span class='hl str'>'&lt;/h1&gt;'</span><span class='hl opt'>);</span>
        destination<span class='hl opt'>.</span><span class='hl kwd'>append</span><span class='hl opt'>(</span> new_data <span class='hl opt'>);</span>
    <span class='hl opt'>});</span>

    _store<span class='hl opt'>.</span><span class='hl kwd'>get_new_data</span><span class='hl opt'>(</span> render_data <span class='hl opt'>);</span>
<span class='hl opt'>});</span></pre><br /><h3>_store.js</h3><pre><span class='hl kwa'>function</span> <span class='hl kwd'>get_new_data</span><span class='hl opt'>(</span> callback <span class='hl opt'>) {</span>
    <span class='hl kwa'>var</span> data <span class='hl opt'>=</span> <span class='hl kwd'>data_from_store</span><span class='hl opt'>();</span>

    <span class='hl kwa'>if</span><span class='hl opt'>( !!</span>data <span class='hl opt'>) {</span>
        <span class='hl kwd'>callback</span><span class='hl opt'>(</span> data <span class='hl opt'>);</span>
    <span class='hl opt'>}</span>
    <span class='hl kwa'>else</span> <span class='hl opt'>{</span>
        _db<span class='hl opt'>.</span><span class='hl kwd'>get_more_data</span><span class='hl opt'>(</span> <span class='hl kwa'>function</span> <span class='hl opt'>(</span> new_data <span class='hl opt'>) {</span>
            <span class='hl kwd'>store_new_data</span><span class='hl opt'>(</span> new_data <span class='hl opt'>);</span>
            <span class='hl kwd'>callback</span><span class='hl opt'>(</span> new_data <span class='hl opt'>);</span>
        <span class='hl opt'>});</span>
    <span class='hl opt'>}</span>
<span class='hl opt'>}</span></pre><br /><h3>_db.js</h3><pre><span class='hl kwa'>function</span> <span class='hl kwd'>get_more_data</span><span class='hl opt'>(</span> callback <span class='hl opt'>) {</span>
    $<span class='hl opt'>.</span><span class='hl kwd'>get</span><span class='hl opt'>(</span><span class='hl str'>'/more_data/'</span><span class='hl opt'>, {},</span> callback<span class='hl opt'>);</span>
<span class='hl opt'>}</span></pre>
<p>Of course, some things are simplified here - it&#8217;s just a pattern, not a specific case. The important thing is that with the closure callback sent from _gui to _store has a reference to the destination object. It mean that as soon as the data is available, the callback know how and <strong>where</strong> to render them. This simple example shows that closures becomes a great means of code modularization. _gui module knows what data it wants, how to present it and is deeply convinced that all the data is available from _store. On the other hand store has no idea who asks for data and how it&#8217;s going to use the data, but knows the with a request a black box came with inscription: &#8220;Do the magic&#8221;. What&#8217;s more - if there&#8217;s no data in the store, the _store module knows that it can request that data from _db module. And again this module has no idea who&#8217;s asking for the data and why, but gets a little black box with inscription &#8220;All the magic happens here&#8221;.</p></content>
 </entry>
 
 <entry>
   <title>Sound and Terminal</title>
   <link href="http://code.trzewiczek.info/2011/02/12/Soundfiles-and-terminal.html"/>
   <updated>2011-02-12T00:00:00+01:00</updated>
   <id>http://code.trzewiczek.info//2011/02/12/Soundfiles-and-terminal</id>
   <content type="html"><p>My hard drive is full of mp3 files - my phone doesn&#8217;t understand a different format, so I&#8217;m forced to keep them this way. But when I want to publish my music on my website I choose ogg format - the open audio format available for modern browsers. How to convert files from mp3 to ogg in terminal? I just need <em>lame</em>, <em>oggenc</em> and a small pipe.</p>

<p><em>lame</em> is a small program that allows you to create files in mp3 format. Its list of options is long, but for us the most interesting is the option - <em>decode</em>. Thanks to it we can read the mp3 file as a raw audio stream. Of course it does not improve sound quality, but at least lets me do something with this stream.</p>

<p>The second program we need is <em>oggenc</em> - the ogg vorbis codec. Although its list of options is even longer, we will use only one. Option <em>-</em> (the dash) allows you to load raw audio stream.</p>

<p>The connection (via pipe) looks something like this:</p>
<pre>
  lame - decode my_file.mp3 - | oggenc - raw -o my_file.ogg</pre>
<p>What&#8217;s going on with these additional <em>-</em> and <em>|</em>? The point is that both <em>lame</em> and <em>oggenc</em> need two files - one for the input (file we want to convert) and one output (new file to be created). But to combine both programs I use the Unix pipe mechanism. Lonely dashes in this snippet of code mean: <em>save to</em> / <em>read from</em> standard IO stream, which is <strong>de facto</strong> terminal window itself. Thus we do not create a temporary file with the intermediate state (raw audio file), but one goes straight to the other.</p>

<p>Remaining question is: how to do it in bulk? A simple bash loop will do:</p>
<pre>
  for f in * mp3; do
    lame - decode $ f - | oggenc - raw - about ${f/mp3/ogg};
  done</pre>
<p>The strange looking ${f/mp3/ogg} changes the extension in the files names - nothing special actually.</p></content>
 </entry>
 
 
</feed>
